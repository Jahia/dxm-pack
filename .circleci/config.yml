version: 2.1

commands:
  generate_cachekey_seed:
      description: Generate Cache Key Seeds
      steps:
      - run: 
          name: Generate Cache Key Seeds
          command: |
            find . -name 'pom.xml' | sort | xargs cat > ~/source/maven_cache_seed

references:
  workdir: &workdir
    working_directory: ~/source

  persist-workspace: &persist-workspace
    persist_to_workspace:
      root: ~/source
      paths:
        - .

  attach-workspace: &attach-workspace
    attach_workspace:
      at: .

jobs:
  checkout:
    <<: *workdir
    docker: # run the steps with Docker
      - image: circleci/openjdk:8-jdk-stretch
    steps:
      - checkout
      - generate_cachekey_seed
      - *persist-workspace

  build:
    parameters:
      is_pull_request:
        type: boolean
        default: false
    <<: *workdir
    docker: # run the steps with Docker
      - image: circleci/openjdk:8-jdk-stretch
    resource_class: xlarge
    steps:
      - *attach-workspace
      - restore_cache:
          keys:
            - v1-maven-dependencies-{{ checksum "maven_cache_seed" }}
            - v1-maven-dependencies-
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - run:
          name: Docker login
          # This is needed to push docker image
          command: |
            echo "$DOCKERHUB_LOGIN"
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_LOGIN" --password-stdin
      - run:
          name: Get the code signing certificate
          command: |
            CODE_SIGNING_CERTIFICATE_URL=$(echo $CODE_SIGNING_CERTIFICATE_ENCRYPTED_URL | sed -r 's/(.{64})/\1\n/g' | openssl enc -base64 -d -aes-256-cbc -nosalt -md md5 -pass pass:$CODE_SIGNING_CERTIFICATE_ENCRYPTION_PWD)
            if [ ! -d /home/circleci/source/.codesign/ ]; then
              mkdir /home/circleci/source/.codesign/
            fi
            CODE_SIGNING_CERTIFICATE_URL=${CODE_SIGNING_CERTIFICATE_URL%$'\r'}
            curl ${CODE_SIGNING_CERTIFICATE_URL} --output /home/circleci/source/.codesign/jahia-code-signing-certificate.p12
      - run:
          name: Store project version
          command: mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec > jahia.version
      - run:
          name: Determine tag
          command: |
            if [ "current" = "<< pipeline.parameters.PARENT_IMAGE_TAG >>" ]; then
              cp jahia.version parent.tag
              if [ "false" = "<<parameters.is_pull_request>>" ]; then
                cp jahia.version image.tag
              else
                echo `cat jahia.version`-"${CIRCLE_BRANCH}" > image.tag
              fi
            else
              echo "<< pipeline.parameters.PARENT_IMAGE_TAG >>" > parent.tag
              cp parent.tag image.tag
            fi
      - run:
          # TODO One day we may want to replace the install by deploy in the name and the command
          name: mvn clean install
          command: mvn -s .circleci/.circleci.settings.xml -U -e -Dparent.tag=`cat parent.tag` -Dimage.tag=`cat image.tag` clean install -Pdocker,installer,sign-installer-jar,windows-installer,sign-installer-exe -Djahia.sign.keystore=/home/circleci/source/.codesign/jahia-code-signing-certificate.p12 -Djahia.sign.storepass=$CODE_SIGNING_PWD
      - unless:
          condition: <<parameters.is_pull_request>>
          steps:
            - run:
                # TODO Until that day, only deploy docker image from here
                name: mvn deploy
                working_directory: ~/source/docker-jahia
                command: mvn -s ../.circleci/.circleci.settings.xml -U -e -Dparent.tag=`cat ../parent.tag` -Dimage.tag=`cat ../image.tag` deploy
      - when:
          condition: <<parameters.is_pull_request>>
          steps:
            - run:
                # This is only done on PR, as master is pushed with mvn deploy
                name: Push PR Docker image
                command: |
                  docker push jahia/jahia-opencore-dev:`cat image.tag`
      - run:
          name: Store docker image
          command: docker save -o image.tar jahia/jahia-opencore-dev:`cat image.tag`
      - save_cache:
          paths:
            - ~/.m2
          key: v1-maven-dependencies-{{ checksum "maven_cache_seed" }}
      # TODO We are just running sonar in this task, when we want to really switch over to CircleCI we will want to uncomment this part
      #- run:
      #     name: Copy artifacts
      #     command: |
      #       mkdir /tmp/artifacts/
      #       cp /home/circleci/source/package/jahia-installer-package/target/*.jar /tmp/artifacts/
      #- store_artifacts:
      #     path: /tmp/artifacts/
      - *persist-workspace

  integration_tests:
    <<: *workdir
    docker: # run the steps with Docker
      - image: circleci/openjdk:8-jdk-stretch
    # Available types: medium, large, xlarge, 2xlarge https://circleci.com/docs/2.0/configuration-reference/#machine-executor-linux
    resource_class: xlarge
    parameters:
      TESTS_IMAGE:
        type: string
        default: "jahia/jahia-opencore-test"
      BUILD_TESTSIMAGE:
        type: boolean
        default: true
      TESTS_PATH:
        type: string
        default: "docker-tests/"
    steps:
      - *attach-workspace
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - run:
          name:
            Prepare artifacts
            # This command copy the various build artifacts into the /tests/ folder to be later
          # used by jahia-cli to provision Jahia for testing
          command: |
            if [ ! -d << parameters.TESTS_PATH >>artifacts ]; then
              mkdir -p << parameters.TESTS_PATH >>artifacts
            fi
      - run:
          name: Docker login
          # This is needed to fetch private docker images (such as Jahia snapshot)
          command: |
            echo "$DOCKERHUB_LOGIN"
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_LOGIN" --password-stdin
      - run:
          name: Load docker image
          command: docker load -i image.tar
      - run:
          name: Spin-up dockerized jahia
          # At that point we're only sprinning up Jahia and its runtime dependencies,
          # We are not starting the tests yet since we first want to build the test container (or run from a previously built container) \
          # Checking the presence of the .env file is there because it's needed by the tests, but to not break ci/cd if variables
          #   are added to the compose file but not to the environment variables in circleci config.yml
          command: |
            set -e
            cd << parameters.TESTS_PATH >>
            if [[ ! -e .env ]]; then
              mv .env.example .env
            fi
            echo JAHIA_IMAGE=jahia/jahia-opencore-dev:`cat ../image.tag` >> .env
            docker-compose -f docker-compose.yml up -d jahia
          no_output_timeout: 2h
      - run:
          # We want to build the test image from scratch with any code change (since that code change could be in the tests themselves)
          name: Build << parameters.TESTS_IMAGE >> image
          command: |
            if [ << parameters.BUILD_TESTSIMAGE >> == true ]; then
              cd << parameters.TESTS_PATH >>
              docker build -t << parameters.TESTS_IMAGE >> .
              docker save -o tests_image.tar << parameters.TESTS_IMAGE >>
            fi
      - run:
          name: Execute tests
          # Running the tests, note that the reports are copied at the end of execution
          # We don't need (nor want) this actual step to fail
          # Failure is determined by counting the number of failed tests in the output report
          # Note: the timeout env vars are added to address this: https://github.com/docker/compose/issues/3927
          command: |
            set -e
            cd << parameters.TESTS_PATH >>
            export DOCKER_CLIENT_TIMEOUT=120
            export COMPOSE_HTTP_TIMEOUT=120
            docker-compose -f docker-compose.yml up cypress
            docker cp cypress:/tmp/results ./artifacts
          no_output_timeout: 2h
          environment:
            TESTS_IMAGE: << parameters.TESTS_IMAGE >>:latest
      - run:
          name: Export jahia logs
          when: always
          command: |
            set -e
            cd << parameters.TESTS_PATH >>
            docker logs jahia > ./artifacts/results/jahia.log
            docker logs cypress > ./artifacts/results/cypress.log
      # This is not needed since cypress is going to terminat on failure with exit code 1
      - run:
          name: Analyze Test results
          when: always
          # This looks at the report and fail the job if one of the test has failed
          command: |
            cd << parameters.TESTS_PATH >>
            if [[ ! -e ./artifacts/results/test_success ]]; then
              echo "More than one failure found, sending exit signal"
              exit 1
            fi
      - store_test_results:
          path: << parameters.TESTS_PATH >>artifacts/results/xml_reports
      - run:
          name: remove xml results folder
          command: rm -rf << parameters.TESTS_PATH >>artifacts/results/xml_reports
      - store_artifacts:
          path: << parameters.TESTS_PATH >>artifacts/results
      - *persist-workspace

  sonar:
    parameters:
      is_pull_request:
        type: boolean
        default: false
    <<: *workdir
    docker: # run the steps with Docker
      - image: circleci/openjdk:8-jdk-stretch
    resource_class: xlarge
    steps:
      - *attach-workspace
      - restore_cache:
          keys:
            - v1-maven-dependencies-{{ checksum "maven_cache_seed" }}
            # fallback to using the latest cache if no exact match is found
            - v1-maven-dependencies-
      - restore_cache:
          keys:
            - v1-sonar-owasp-dependencies-<<parameters.is_pull_request>>
            - v1-sonar-owasp-dependencies-
      - when:
          condition: <<parameters.is_pull_request>>
          steps:
            - run:
                name: Analyze pull request with sonar
                command: |
                  mvn -s .circleci/.circleci.settings.xml sonar:sonar -Dsonar.pullrequest.branch=$CIRCLE_BRANCH \
                  -Dsonar.pullrequest.key=<< pipeline.parameters.pull_request_number >> \
                  -Dsonar.pullrequest.base=<< pipeline.parameters.target_branch >> \
                  -Dsonar.pullrequest.github.repository=<< pipeline.parameters.github_repository >>
      - unless:
          condition: <<parameters.is_pull_request>>
          steps:
            - run:
                name: Sonar analysis
                environment: 
                  DEPENDENCY_CHECK_SETTINGS: -DfailOnError=false -DskipProvidedScope=true -DskipTestScope=false 
                      -DretireJsAnalyzerEnabled=false -DnodeAnalyzerEnabled=false -Dformats=HTML,JSON 
                      -Dsonar.dependencyCheck.jsonReportPath=target/dependency-check-report.json 
                      -Dsonar.dependencyCheck.htmlReportPath=target/dependency-check-report.html 
                      -DdataDirectory=/home/circleci/.owasp/dependency-check-data 
                      -DsuppressionFile=.circleci/owasp-suppressions.xml
                command: |
                  if [[ "${CIRCLE_BRANCH}" == "master" ]];
                  then
                    mvn -s .circleci/.circleci.settings.xml dependency-check:aggregate sonar:sonar \
                        $DEPENDENCY_CHECK_SETTINGS
                  else
                    mvn -s .circleci/.circleci.settings.xml dependency-check:aggregate sonar:sonar \
                        -Dsonar.branch.name=$CIRCLE_BRANCH $DEPENDENCY_CHECK_SETTINGS
                  fi
      - save_cache:
          paths:
            - ~/.owasp/dependency-check-data
            - ~/.sonar/cache
          key: v1-sonar-owasp-dependencies-<<parameters.is_pull_request>>

  trigger_ee_build:
    <<: *workdir
    docker: # run the steps with Docker
      - image: circleci/openjdk:8-jdk-stretch
    steps:
      - run:
          name: Trigger the build of jahia-ee
          command: curl -X POST --url 'https://circleci.com/api/v2/project/gh/Jahia/jahia-ee/pipeline'
            --header 'circle-token:'"$CIRCLECI_PIPELINE_LAUNCH_TOKEN"''
            --header 'content-type:application/json'
            --data '{ "branch":"'"$CIRCLE_BRANCH"'" }'

  trigger_pr_ee_build:
    <<: *workdir
    docker: # run the steps with Docker
      - image: circleci/openjdk:8-jdk-stretch
    steps:
      - *attach-workspace
      - run:
          name: Trigger the build of jahia-ee
          command: curl -X POST --url 'https://circleci.com/api/v2/project/gh/Jahia/jahia-ee/pipeline'
            --header 'circle-token:'"$CIRCLECI_PIPELINE_LAUNCH_TOKEN"''
            --header 'content-type:application/json'
            --data '{ "parameters":{"PARENT_IMAGE_TAG":"'"`cat image.tag`"'"} }'

# Pipeline parameter must be declared
parameters:
  run_pull_request:
    type: boolean
    default: false
  target_branch:
    type: string
    default: ""
  pull_request_number:
    type: string
    default: ""
  github_repository:
    type: string
    default: ""
  PARENT_IMAGE_TAG:
    type: string
    default: "current"

workflows:
  # This one is run only when triggered with the API, using a GitHub action
  pull_request:
    when: << pipeline.parameters.run_pull_request >>
    jobs:
      - checkout:
          name: PR Checkout
      - build:
          name: PR Build Jahia Pack
          is_pull_request: true
          context:
            - QA_ENVIRONMENT
            - jahia-code-signing
          requires:
            - PR Checkout
      - integration_tests:
          name: Integration tests
          context: QA_ENVIRONMENT
          requires:
            - PR Build Jahia Pack
      - sonar:
          name: PR Sonar analysis of the pull request
          is_pull_request: true
          context: QA_ENVIRONMENT
          requires:
            - PR Build Jahia Pack
  core_pr_triggered:
    when:
      not:
        equal: [ current, << pipeline.parameters.PARENT_IMAGE_TAG >> ]
    jobs:
      - checkout:
          name: Core PR Checkout
      - build:
          name: Core PR Build Jahia Pack
          is_pull_request: true
          context:
            - QA_ENVIRONMENT
            - jahia-code-signing
          requires:
            - Core PR Checkout
      - integration_tests:
          name: Integration tests
          context: QA_ENVIRONMENT
          requires:
            - Core PR Build Jahia Pack
      - trigger_pr_ee_build:
          name: Trigger build of jahia-ee for core PR
          context: QA_ENVIRONMENT
          requires:
            - Core PR Build Jahia Pack
  on-code-change:
    when:
      and:
        - equal: [ current, << pipeline.parameters.PARENT_IMAGE_TAG >> ]
        - not: << pipeline.parameters.run_pull_request >>
    jobs:
      - checkout:
          filters:
            branches:
              only:
                - master
                - /feature-.*/
                - /JAHIA-[0-9]-[0-9]-[0-9]-X-BRANCH/
      - build:
          name: Build Jahia Pack
          is_pull_request: false
          context:
            - QA_ENVIRONMENT
            - jahia-code-signing
          requires:
            - checkout
      - integration_tests:
          name: Integration tests
          context: QA_ENVIRONMENT
          requires:
            - Build Jahia Pack
      - sonar:
          name: Sonar analysis
          is_pull_request: false
          context: QA_ENVIRONMENT
          requires:
            - Build Jahia Pack
      - trigger_ee_build:
          name: Trigger build of jahia-ee
          context: QA_ENVIRONMENT
          requires:
            - Build Jahia Pack
